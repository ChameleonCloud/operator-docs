{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chameleon Operator Docs","text":"<p>This repo uses <code>mkdocs</code> to build a static website of docs.</p> <p>The intended content is resources for Chameleon Openstack Site operators, and assisting with user tickets.</p>"},{"location":"#building-these-docs","title":"Building these Docs","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\nmkdocs build\n</code></pre>"},{"location":"#making-a-change","title":"Making a Change","text":"<p>Just edit markdown directly, and make a PR. To get a live preview while editing, run <code>mkdocs serve</code></p>"},{"location":"ticketmaster/","title":"Ticketmaster Guide","text":"<p>The <code>ticketmaster</code> is our name for the weekly user-support role. It currently rotates between staff at UChicago and TACC.</p>"},{"location":"ticketmaster/#responsibilities","title":"Responsibilities","text":"<p>The ticketmaster is responsible for triaging user-tickets, and for addressing a subset of them.</p> <p>Proposal: Issues that require reconfiguring an openstack site, editing a database directly, or fixing a hardware failure should be forwarded to the relevant site operator via TODO</p>"},{"location":"ticketmaster/#common-user-requests","title":"Common user requests","text":"<p>Here's a list of common user requests, TODO link to docs for each</p> <ul> <li>Remove me from mailing lists</li> <li>delete my account</li> <li>change a bios setting</li> <li>set a node to exclusive project access</li> <li>update quota for a specfic site</li> </ul>"},{"location":"ticketmaster/#common-user-issues","title":"Common user issues","text":"<p>Separate from requests, these require some diagnosis</p> <ul> <li>help, I can't log in</li> <li>failed to allocate IP address</li> </ul>"},{"location":"guides/bios-changes/","title":"BIOS Changes","text":"<p>If users ask us to perform BIOS changes for them, we generally grant any reasonable requests for them. Otherwise, it's worth a discussion because some BIOS changes can be fairly destructive.</p> <p>Who, and how, bios changes should be made depends on the node type and Chameleon site in question. When unclear, defer to the site operator.</p>"},{"location":"guides/bios-changes/#the-bios-changes-ledger","title":"The BIOS Changes Ledger","text":"<p>All BIOS changes must be logged in this spreadsheet, so that we keep track of anything that might need to be rolled back at a later date.</p> <p>https://docs.google.com/spreadsheets/d/1etR4iVRCqszRbDYibUAJS8JCKXFi7AXWrbrlZt8KVnk/edit?usp=sharing</p>"},{"location":"guides/bios-changes/#known-changes","title":"Known Changes","text":"<p>The following are changes we've done relatively frequently, and could be candidates for automation.</p>"},{"location":"guides/bios-changes/#to-verify","title":"To Verify:","text":"<p>Unfortunately, evertthing below here needs verification, given that it references idracadm7. We should have procedures for either updated idrac, or ideally redfish that can be ported to ironic eventually.</p>"},{"location":"guides/bios-changes/#hyperthreadingsmt","title":"Hyperthreading/SMT","text":"<p>How to check if enabled:</p> <p>How to enable:</p> <p>How to disable:</p> <pre><code>idracadm7 -r &lt;host&gt;-oob -u &lt;username&gt; -p &lt;password&gt; set BIOS.ProcSettings.LogicalProc Enabled\n</code></pre> <p>Where the host is <code>impi_address</code>, username is <code>ipmi_username</code>, and password is <code>ipmi_password</code> from ironic. You must also add a job to apply this action on reboot:</p> <pre><code>idracadm7 -r &lt;host&gt;-oob -u &lt;username&gt; -p &lt;password&gt; jobqueue create BIOS.Setup.1-1\nidracadm7 -r &lt;host&gt;-oob -u &lt;username&gt; -p &lt;password&gt; serveraction hardreset\n\n# The job may sit in the queue for up to 10-30 minutes after this, so be patient\n# After reboot completes, verify\nidracadm7 -r &lt;host&gt;-oob -u &lt;username&gt; -p &lt;password&gt; get BIOS.ProcSettings.LogicalProc\n</code></pre>"},{"location":"guides/bios-changes/#cpu-frequency-scaling","title":"CPU Frequency Scaling","text":"<p>How to check if enabled:</p> <p>How to enable:</p> <p>How to disable:</p> <p>A user may report that the device files for each core (/sys/devices/system/cpu/cpu0/cpufreq) do not exist. Replace $1 with the node name</p> <pre><code>idracadm7 -r \"$1-oob\" -u &lt;username&gt; -p &lt;password&gt; set BIOS.SysProfileSettings.SysProfile Custom\nidracadm7 -r \"$1-oob\" -u &lt;username&gt; -p &lt;password&gt; set BIOS.SysProfileSettings.ProcCStates Enabled\nidracadm7 -r \"$1-oob\" -u &lt;username&gt; -p &lt;password&gt; set BIOS.SysProfileSettings.ProcC1E Enabled\nidracadm7 -r \"$1-oob\" -u &lt;username&gt; -p &lt;password&gt; set BIOS.SysProfileSettings.ProcPwrPerf OsDbpm\nidracadm7 -r $1-oob -u &lt;username&gt; -p &lt;password&gt; jobqueue create BIOS.Setup.1-1\nidracadm7 -r $1-oob -u &lt;username&gt; -p &lt;password&gt; serveraction hardreset\n</code></pre>"},{"location":"guides/bios-changes/#enable-cpu-virtualization","title":"Enable CPU Virtualization","text":"<p>How to check if enabled:</p> <p>How to enable:</p> <p>How to disable:</p> <p>This allows running level 1 hypervisors (KVM) on baremetal</p> <pre><code>racadm --nocertwarn -u &lt;user&gt; -p &lt;pass&gt; -r &lt;idrac_ip&gt; set BIOS.ProcSettings.ProcVirtualization Enabled\nracadm --nocertwarn -u &lt;user&gt; -p &lt;pass&gt; -r &lt;idrac_ip&gt; jobqueue create BIOS.Setup.1-1\n</code></pre>"},{"location":"guides/bios-changes/#iommu","title":"IOMMU","text":"<p>How to check if enabled:</p> <p>How to enable:</p> <p>How to disable:</p>"},{"location":"guides/bios-changes/#sr-iov","title":"SR-IOV","text":"<p>How to check if enabled:</p> <p>How to enable:</p> <p>How to disable:</p> <pre><code># does the OS see that SR-IOV is enabled (run on node)\nlspci | grep Mellanox | wc -l # 1 = no, &gt;1 = yes, 0 = ??\n\n. ~/scripts/idrac-functions.sh\n# Check current configuration\nidrac-cmd-raw c01-40-oob get BIOS.IntegratedDevices.SriovGlobalEnable\n# Enable SR-IOV\nidrac-cmd-raw c01-40-oob set BIOS.IntegratedDevices.SriovGlobalEnable Enabled\n# Schedule a job to commit change &amp; reboot the node\nidrac-cmd-raw c01-40-oob jobqueue create BIOS.Setup.1-1 -r pwrcycle -s TIME_NOW\n# Monitor the execution of the job\nidrac-cmd-raw c01-40-oob jobqueue view\n\n# If jobqueue gets stuck:\nidrac-cmd-raw c01-40-oob jobqueue delete -i JID_CLEARALL_FORCE\nsleep 120\nidrac-cmd-raw c01-40-oob racreset\n</code></pre> <p>On the node, when booted, the instructions here can be used to enable SR-IOV in the NIC itself.</p>"},{"location":"guides/bios-changes/#enabledisable-pxe-boot-for-network-interfaces","title":"Enable/Disable PXE boot for Network Interfaces","text":"<p>How to check if enabled:</p> <p>How to enable:</p> <p>How to disable:</p> <p>Some nodes will be unable to provision because more than one PXE device i-rs enabled in the BIOS. Check available interfaces:</p> <pre><code>racadm --nocertwarn -u &lt;user&gt; -p &lt;pass&gt; -r &lt;idrac_ip&gt; get nic.NICConfig.1.LegacyBootProto\nracadm --nocertwarn -u &lt;user&gt; -p &lt;pass&gt; -r &lt;idrac_ip&gt; get nic.NICConfig.2.LegacyBootProto\nracadm --nocertwarn -u &lt;user&gt; -p &lt;pass&gt; -r &lt;idrac_ip&gt; get nic.NICConfig.3.LegacyBootProto\nracadm --nocertwarn -u &lt;user&gt; -p &lt;pass&gt; -r &lt;idrac_ip&gt; get nic.NICConfig.4.LegacyBootProto\n</code></pre> <p>Disable a particular interface:</p> <pre><code>racadm --nocertwarn -u &lt;user&gt; -p &lt;pass&gt; -r &lt;idrac_ip&gt; set nic.NICConfig.4.LegacyBootProto NONE\n</code></pre> <p>Apply the change:</p> <pre><code>racadm --nocertwarn -u &lt;user&gt; -p &lt;pass&gt; -r &lt;idrac_ip&gt; jobqueue create NIC.&lt;nic&gt;.&lt;#-#-#&gt;\n</code></pre> <p>By default, this change will be applied on the next reboot. To force a reboot, append <code>-r pwrcycle</code> to the end of the previous command</p>"},{"location":"guides/catchall/","title":"Debugging Catchall","text":"<p>Drop one-off scripts, guides, or generally any answered slack question in here to quickly add it, and we can categorize it later.</p>"},{"location":"guides/catchall/#data-recovery","title":"Data Recovery","text":"<p>for the user who lost their instance, i was thinking about pointing them at this: https://chameleoncloud.org/blog/2022/10/26/data-storage-management-and-sharing-on-chameleon/ and this: https://chameleoncloud.readthedocs.io/en/latest/technical/images.html#the-cc-snapshot-utility</p>"},{"location":"guides/identity_federation/","title":"How Chameleon's Identity Federation Works","text":"<p>Chameleon uses Keycloak as the respository of chameleon-wide user accounts. However, we deletate authentication to Globus and/or TAS.</p> <p>Additionally, on login to an openstack site, keycloak sends a token to keystone which contains the username and list of project memberships, which keystone maps into local ones.</p> <p>Note: Globus itself is also an identity broker, and this process can be continued as far as desired.</p> <pre><code>sequenceDiagram\n    participant User\n    participant Keystone as Keystone (Service Provider)\n    participant Keycloak as Keycloak (Identity Broker)\n    participant Globus as Globus (Identity Provider)\n\n    User-&gt;&gt;Keystone: Login to Openstack\n    Keystone-&gt;&gt;Keycloak: Auth Request\n\n    Keycloak-&gt;&gt;User: Prompt for provider selection\n    User-&gt;&gt;Keycloak: Chooses \"Login with Federated Identity\"\n    Keycloak-&gt;&gt;Globus: Auth Request\n    User-&gt;&gt;Globus: Login to Globus\n\n    Globus-&gt;&gt;Keycloak: Auth Response\n    Note over Globus: includes username, id, display_name, email\n    Keycloak-&gt;&gt;Keystone: Auth Response\n    Note over Keycloak: Maps Globus Acct to Chameleon Acct\n    Keystone-&gt;&gt;User: Login Permitted\n    Note over Keystone: Maps Keycloak User, Projects to local ones\n</code></pre> <p>Google, and ORCID logins are special casses of the globus login, and merely pre-fills a selection on the \"login to globus\" step. In contrast, \"Log in with TAS\" uses a Keycloak server at TACC as Identity Provider, instead of Globus.</p> <p>Due to this delegation, keycloak need not hold any \"password\" for a user, since they only ever log in via an external identity source.</p> <p>The chameleon portal is the mechanism by which projects are created and managed in keycloak, and in particular, we set a flag to indicate whether a given project has an active allocation.</p> <p>Keycloak holds a unique \"client\" for each service provider, which includes portal, keystone at each site, and several other services which leverage SSO (Jupyterhub, grafana,...).</p> <p>We have added a custom \"mapper\" to Keycloak such that when one of these clients sends an auth request, keycloak responds with a list of projects that the user is a member of, filtered for only ones with an active allocation.</p> <p>Keystone, when it receives a token with this list of projects, is configured to create a local project and user membership therein, updated at the time of login.</p> <p>Note: if they never log in again, this means that users will remain in expired local projects indefinitely.</p>"},{"location":"guides/identity_federation/#issues-with-account-linking","title":"Issues with Account Linking","text":"<p>On first login, keycloak attempts to match the incoming identity from Globus or TAS with an existing Chameleon account, and does so by comparing the \"primary id\" from the provider, to the \"linked identities\" of the Chameleon accounts.</p> <p>In the simple case, this all works well, and either a match is found, and the user logged in, or a match is not found, and a new account created.</p> <p>However, we ran into issues where users would end up with N different globus accounts, and a unique chameleon account for each, and therefore would not have consistent project memebership or openstack resource ownership, depending on the federated identity used.</p> <p>To address this, we added a check not just for the primary ID, but also the linked email address. In the case where an the primary ID does not match, but an email address does, the user is asked to separately authenticate to the matched identity to prove ownership, after which the linked identity is updated to the new one.</p> <p>This works for TAS, but encounters multiple issues with Globus. </p> <ol> <li>The account linking mechanism for globus is prompting for the \"password\" of the other keycloak account, which may not have ever been set.</li> <li>In globus, it is valid to have multiple different accounts with the same email address associated. <ol> <li>Additionally, Globus accounts can either be completely independent, in which case they return unique primary identities to keycloak</li> <li>or they can be \"linked\", in which case globus will return a single primary identity for all of them, but also include a list of linked identities.</li> </ol> </li> <li>A user may not be aware of what globus identity they are authenticated.</li> <li>the identity we map from keycloak -&gt; Keystone is the globus \"username\", but this is not a guaranteed stable identifier, and may change over time.</li> </ol> <p>Ultimately, we should implement some or all of the following:</p> <ol> <li>Display a users currently authenticated federated identity on the account linking screen</li> <li>provide a mechanism to open a helpdesk ticket from the account linking page</li> <li>permit use of email to validate linked accounts (but only verified emails)</li> <li>take advantage of the list of identities that globus returns to match users more robustly, and direct users to the globus account linking</li> </ol>"},{"location":"guides/identity_federation/#references","title":"References","text":"<ul> <li>Globus Identities</li> <li>OpenID Auth Code Flow</li> <li>Keycloak ID Brokering</li> <li>Migrating towards Single Sign-On and Federated Identity</li> </ul>"},{"location":"guides/troubleshooting/","title":"Troubleshooting","text":""},{"location":"guides/troubleshooting/#getting-a-reservation-for-a-node-to-maintain","title":"Getting a reservation for a node to maintain","text":"<p>Example: We need to replace SSDs in nodes P3-SSD-009 and P3-SSD-010, but they are currently reserved. Therefore, we'll need to make our own reservation for a future time.</p>"},{"location":"guides/troubleshooting/#step-1-find-out-when-the-nodes-are-currently-reserved","title":"Step 1: Find out when the nodes are currently reserved.","text":"<p>We go to https://chi.uc.chameleoncloud.org/project/leases/calendar/host/ , then select the node type of \"storage_nvme\"</p> <p> The bars go off the right side of the screen, so we zoom out to 30 days. </p> <p>It's not clear what date the lease ends visually, but we can hover over the tooltips and get timestamps.</p> <ul> <li> <p>Current lease:</p> <p> *   Blocking lease:</p> <p></p> </li> </ul> <p>So we can make a lease either between 2024/02/21 and 2024/02/23, or after 2024/03/01.</p> <p>We don't know the timezone, so we'll try both UTC and Central Time (Chicago)</p>"},{"location":"guides/troubleshooting/#step-2-make-a-leases","title":"Step 2, make a lease(s)","text":"<p>We want to reserve two different nodes by name, and Blazar doesn't support \"OR\" parameters. We could specify an array of reservations, but the syntax is difficult via CLI, and not supported in horizon.</p> <p>So, instead we'll make two leases.</p> <p>Here, we fill in parameters to try and fit a lease in on the 21st-23rd. </p> <p>It tells us not to specify seconds, even though the lease calendar shows them. </p> <p>We specify the node by name, and set quantity min=max=1 </p> <p>We click create lease, and hooray, it worked! If we guessed wrong, we would have started this step over.</p> <p>Now we do it a second time for node p3-ssd-009.</p>"},{"location":"guides/troubleshooting/#using-the-leases","title":"Using the leases","text":"<p>Once the leases start, we'll know that users do NOT have the nodes. At that time, we'll use the openstack CLI to:</p> <ol> <li>set the nodes to maintenance mode in ironic</li> <li><code>openstack baremetal node maintenance set p3-ssd-009</code></li> <li><code>openstack baremetal node maintenance set p3-ssd-010</code></li> <li>view current maintenance status with <code>openstack baremetal node show p3-ssd-009</code></li> <li>Now that the node have maintenance mode set in ironic, it will no longer enforce power state. This means that powering the node on and off with idrac or the physical power button will work as expected. However, openstack related operations (node cleaning, inspection, provisioning), will be blocked until maintenance mode is unset.</li> </ol>"},{"location":"guides/troubleshooting/#inspecting-a-node","title":"Inspecting a Node","text":"<p>To run some basic health checks on a node (that isn't in use), we can use ironic's inpection feature. This will network boot a node into the ironic agent ramdisk, and then report a bunch of information about the node to ironic. Besides being used to populate the reference-api, it's a good sanity check for \"Can ironic successfully boot and manage this node\", e.g. if inspection fails, then deploying instances will also fail. (However, if inspection succeeds, this does not necessarily guarantee that deploying an instance will too).</p> <ol> <li>Check the current state of the node: <code>openstack baremetal node show &lt;node_name_or_uuid&gt;</code></li> <li>If the <code>provision_state</code> is not <code>active</code>, then we can proceed, and set the node to the manageable state via <code>openstack baremetal node manage &lt;node_name_or_uuid&gt;</code></li> <li>Start the inspection by running <code>openstack baremetal node inspect &lt;node_name_or_uuid&gt;</code></li> <li>After about 15 minutes, the node will have either finished, and moved back to state <code>manageable</code>, or failed and moved to state <code>inspect failed</code>. If it failed, look into the logs and see why, similar to failed deployments. If it succeeded, move it back to available via <code>openstack baremetal node provide</code></li> </ol> <p>{% hint style=\"warning\" %} If the node inspected successfully, make sure to move it back to <code>available</code>! Otherwise, it won't be available for users.  {% endhint %}</p>"},{"location":"guides/troubleshooting/#wiping-a-nodes-disks-cleaning","title":"Wiping a Node's disks (cleaning)","text":"<p>To wipe data on a node, you can use ironic's \"cleaning\" feature.</p> <p>{% embed url=\"https://docs.openstack.org/ironic/xena/admin/cleaning.html#manual-cleaning\" %}</p> <p>After verifying that you do indeed want to erase all disks on a node:</p> <pre><code># Discover current \"provisioning_state\" of a node\nopenstack baremetal node show \\\n-c provision_state \\\n&lt;node_name_or_uuid&gt;\n\n# before cleaning can be triggered, the node must be \"manageable\"\nopenstack baremetal node manage &lt;node_name_or_uuid&gt;\n\n# you can choose to either:\n# Erase partition tables and similar (quick)\nopenstack baremetal node clean \\\n--clean-steps '[{\"interface\": \"deploy\", \"step\": \"erase_devices_metadata\"}]' \\\n&lt;node_name_or_uuid&gt;\n\n# or do a full erasure. If devices support hardware erasure \n# (nvme secure erase, etc), this step will use it.\nopenstack baremetal node clean \\\n--clean-steps '[{\"interface\": \"deploy\", \"step\": \"erase_devices\"}]' \\\n&lt;node_name_or_uuid&gt;\n\n# these steps will reboot a node, pxe boot it into the ironic agent ramdisk, \n# execute these commands, and then shut down.\n# the states will transition from manageable-&gt;clean-wait-&gt;cleaning-&gt;manageable\n\n# when done, you will need to make the node available for use again\n# setting the status to available by running\nopenstack baremetal node provide &lt;node_name_or_uuid&gt;\n</code></pre>"},{"location":"guides/troubleshooting/#recovering-data-from-deleted-baremetal-instances","title":"Recovering data from deleted baremetal instances","text":"<p>(We don't do this usually - only in exceptional cases if the instance got deleted due to an unexpected issue in the system) In case an instance on a baremetal node is deleted before the user is able to backup their data (for example in the case of an expired lease), data can be recovered as long as it is not overwritten by the launch of a new instance on the same node.</p>"},{"location":"guides/troubleshooting/#lease-fails-to-start","title":"Lease Fails to start","text":""},{"location":"guides/troubleshooting/#ip-address-already-allocated-in-subnet","title":"IP address \\ already allocated in subnet \\ <p>This message is found in blazar logs with the errored LeaseID that failed to start</p> <p>Get the following information and execute the command in the controller node of the site</p> <pre><code>ORIGINAL_LEASE_ID=\"&lt;lease id of the lease that fails to start&gt;\"\n# Get reservation ID from horizon or from `openstack reservation lease show` \nORIGINAL_LEASE_IP_RESERVATION_ID=\"&lt;reservation id of the IP in the lease&gt;\"\nIP=\"&lt;IP address that is stuck in subnet&gt;\"\n</code></pre> <p>If you do not know the IP that is stuck, execute the below commands</p> <pre><code>FIP_IDS=$(mysql blazar -e \"select floatingip_id from floatingip_allocations where reservation_id = '$ORIGINAL_LEASE_IP_RESERVATION_ID';\" | egrep '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]+' -o)\necho $FIP_IDS\n# get the ip address\nfor FIP_ID in $FIP_IDS\ndo\n    mysql blazar -e \"select id, floating_ip_address from floatingips where id = '$FIP_ID';\"\ndone\n</code></pre> <p>We need to get the Lease ID of a reservation with which the IP address got stuck with</p> <pre><code># see if IP exists and get the reservations ID tagged\n# get this from \n`openstack floating ip show &lt;IP&gt; | egrep reservation | egrep '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]+' -o`\n</code></pre> <pre><code>TAGGED_RESERVATION_ID=\"&lt;the reservation ID from above command&gt;\"\n# get the lease id that got the IP stuck with\nIP_LEASE_ID=$(mysql blazar -e \"select lease_id from reservations where id ='$TAGGED_RESERVATION_ID';\" | egrep '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]+' -o)\n# check if the lease ended\necho $(mysql -t blazar -e \"select * from leases where id ='$IP_LEASE_ID';\")\n</code></pre> <pre><code># Delete the IP\nopenstack floating ip delete &lt;IP&gt;\n</code></pre> <p>We will need to update the current/original lease's IP reservation status, lease status, and lease event status</p> <pre><code># Lookup the reservation of the Original IP\necho $(mysql blazar -e \"select status, id from reservations where id ='$ORIGINAL_LEASE_IP_RESERVATION_ID';\")\n\n# Update the reservation as active for the IP\nmysql blazar -e \"update reservations set status = 'active' where id = '$ORIGINAL_LEASE_IP_RESERVATION_ID' limit 1;\"\n\n# look up the lease status\necho $(mysql blazar -e \"select * from events where lease_id ='$ORIGINAL_LEASE_ID' and status = 'ERROR';\" | egrep '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]+' -o)\n\n# update the errored lease to be active\nmysql blazar -e \"update leases set status = 'ACTIVE' where id = '$ORIGINAL_LEASE_ID' limit 1;\"\n\n# look up the lease event status\nmysql blazar -e \"select * from events where lease_id ='$ORIGINAL_LEASE_ID';\"\n\nEVENT_ID=$(mysql blazar -e \"select * from events where lease_id ='$ORIGINAL_LEASE_ID' and status = 'IN_PROGRESS';\" | egrep '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]+' -o)\n\n# update the event to be done\nmysql blazar -e \"update events set status='DONE' where id='$EVENT_ID' limit 1;\"\n</code></pre>","text":""},{"location":"guides/troubleshooting/#host-not-in-free-pool","title":"Host not in Free pool <p>OpenStack Error:</p> <ul> <li>Failed to execute action on_start for lease</li> <li>Conflict while adding the host</li> <li>One or more hosts already in availability zone(s)</li> </ul> <p>Python Exception Class:</p> <ul> <li>blazar.manager.exceptions.AggregateAlreadyHasHost</li> </ul> <p>Steps</p> <ol> <li>Go to https://chi.tacc.chameleoncloud.org/dashboard/admin/aggregates/ and find UUID of the node that fails to start</li> <li>or query the database with:\\       <code>mysql -D nova_api -e 'select * from aggregate_hosts where host =\u201d&lt;host_id&gt;\"'</code></li> <li>Take note of the reservation ID (aggregate id in MySQL query)</li> <li>Run <code>nova aggregate-list | grep &lt;reservation_id or aggregate_id from mysql query&gt;</code>  to find the aggregate ID (should be an integer)</li> <li>From the same web page afs 1., copy the list of hosts in the aggregate and paste it in a file (e.g. in \\~/hosts)</li> <li> <p>Run:</p> <p><code>for i in `cat ~/hosts`; \\ do nova aggregate-remove-host &lt;aggregate_id&gt; $i; \\     nova aggregate-add-host 1 $i;     done;\\ nova aggregate-delete &lt;aggregate_id&gt;</code></p> </li> </ol>","text":""},{"location":"guides/troubleshooting/#the-lease-is-remaining-intact-and-is-not-being-deleted","title":"The lease is remaining intact and is not being deleted.","text":"<p>Some states (start_lease, end_lease, before_end_lease) might be stuck with 'In progress'</p> <p>Solution: Update the lease event which is stuck to 'Done' and try deleting the lease. </p> <p>Look up the event status' of the Lease. The below command must be executed in the controller node of the site.</p> <p>{% code overflow=\"wrap\" %}</p> <pre><code>LEASE_ID=&lt;LEASE ID WHICH CANNOT BE DELETED&gt;\nmysql blazar -e \"select * from events where lease_id ='$LEASE_ID';\"\n</code></pre> <p>{% endcode %}</p> <p>Get the event ID and update the status as Done</p> <pre><code>EVENT_ID=$(mysql blazar -e \"select * from events where\n    lease_id ='$LEASE_ID' and status = 'IN_PROGRESS';\" | egrep\n    '[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]+' -o)\nmysql blazar -e \"update events set status='DONE' where\n    id='$EVENT_ID' limit 1;\"\n</code></pre>"},{"location":"guides/troubleshooting/#moving-node-to-another-lease","title":"Moving node to another lease","text":"<p>Host reallocate will find a new host based on previous lease parameters if one is available. Running `host-reallocate` without lease ID will reallocate the node for all leases. This may be useful if a node needs to be added to a maintenance lease.</p> <p><code>openstack reservation host reallocate &lt;hypervisor_hostname&gt; --lease-id &lt;lease_id&gt;</code> \\ \\ If you need to keep the current lease intact but want to know what upcoming leases are on the node</p> <p><code>openstack reservation allocation list</code> </p> <p>Find using the <code>blazar_host_id</code> to get the allocations for the host </p> <p><code>blazar_host_id</code> is not the same as \\, this ID can be acquired from <code>openstack reservation host show &lt;hypervisor_hostname&gt;</code> and the <code>id</code> from it will be <code>blazar_host_id</code>"}]}